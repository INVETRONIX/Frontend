/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.project.frontend.SYSTEMproductos.interfaz;

import com.project.frontend.SYSTEMcompras.interfaz.HistorialComprasCliente;
import com.project.frontend.SYSTEMgemini.interfaz.NotificacionesAdmin;
import com.project.frontend.SYSTEMlogin.data.TokenManager;
import com.project.frontend.SYSTEMlogin.interfaz.Login;
import com.project.frontend.SYSTEMproductos.controller.ControllerProducto;
import com.project.frontend.SYSTEMproductos.model.Producto;
import com.project.frontend.core.BackendException;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sebastian
 */
public class VentanaPrincipalAdmin extends javax.swing.JFrame {
    private ControllerProducto controller;
    private DefaultTableModel tableModel;
    /**
     * Creates new form VentanaPrincipalAdmin
     */
    public VentanaPrincipalAdmin() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.controller = new ControllerProducto();
        this.tableModel = (DefaultTableModel) tablaProductos.getModel();
        try {
            llenarTabla();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        // Agregar listener para la selecci√≥n de filas en la tabla
        tablaProductos.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tablaProductos.getSelectedRow();
                    if (selectedRow != -1) {
                        // Habilitar botones cuando hay una fila seleccionada
                        btnModificarProducto.setEnabled(true);
                        btnEliminar.setEnabled(true);
                        
                        // Cargar los datos en los campos de texto
                        txtId.setText(tablaProductos.getValueAt(selectedRow, 0).toString());
                        txtName.setText(tablaProductos.getValueAt(selectedRow, 1).toString());
                        txtPrecio.setText(tablaProductos.getValueAt(selectedRow, 3).toString());
                        txtStock.setText(tablaProductos.getValueAt(selectedRow, 4).toString());
                    } else {
                        // Deshabilitar botones cuando no hay fila seleccionada
                        btnModificarProducto.setEnabled(false);
                        btnEliminar.setEnabled(false);
                        
                        // Limpiar los campos de texto
                        txtId.setText("");
                        txtName.setText("");
                        txtPrecio.setText("");
                        txtStock.setText("");
                    }
                }
            }
        });
        
        // Inicialmente deshabilitar los botones
        btnModificarProducto.setEnabled(false);
        btnEliminar.setEnabled(false);
    }

     private void llenarTabla() throws IOException {
         DefaultTableModel model = new DefaultTableModel();
         model.setColumnIdentifiers(new Object[]{"id", "Nombre", "Descripcion", "Precio", "Cantidad en stock"});
         List<Producto> lista= controller.getAllProductos();
         if(lista.isEmpty()){
             return;
         }
         for (int i = 0; i < lista.size(); i++) {
             model.addRow(new Object[]{
                lista.get(i).getId(),
                lista.get(i).getNombre(),
                lista.get(i).getDescripcion(),
                lista.get(i).getPrecio(),
                lista.get(i).getStock()
             });
         }
         
         tablaProductos.setModel(model);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRegistrarme2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelProductos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        btnAgregarProducto = new javax.swing.JButton();
        btnModificarProducto = new javax.swing.JButton();
        btnNotificaciones = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        btnCerrarSesion = new javax.swing.JButton();
        btnCerrarSesion1 = new javax.swing.JButton();

        btnRegistrarme2.setBackground(new java.awt.Color(51, 51, 255));
        btnRegistrarme2.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrarme2.setText("Registrarme");
        btnRegistrarme2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarme2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));

        jLabel1.setFont(new java.awt.Font("Liberation Sans Narrow", 2, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Invetronix");

        panelProductos.setBackground(new java.awt.Color(153, 153, 153));

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Descripcion", "Precio", "Cantidad en stock"
            }
        ));
        jScrollPane1.setViewportView(tablaProductos);

        javax.swing.GroupLayout panelProductosLayout = new javax.swing.GroupLayout(panelProductos);
        panelProductos.setLayout(panelProductosLayout);
        panelProductosLayout.setHorizontalGroup(
            panelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 858, Short.MAX_VALUE)
            .addGroup(panelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE))
        );
        panelProductosLayout.setVerticalGroup(
            panelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
            .addGroup(panelProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelProductosLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        btnAgregarProducto.setBackground(new java.awt.Color(51, 51, 255));
        btnAgregarProducto.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarProducto.setText("Agregar Producto");
        btnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProductoActionPerformed(evt);
            }
        });

        btnModificarProducto.setBackground(new java.awt.Color(51, 51, 255));
        btnModificarProducto.setForeground(new java.awt.Color(255, 255, 255));
        btnModificarProducto.setText("Modificar Producto");
        btnModificarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarProductoActionPerformed(evt);
            }
        });

        btnNotificaciones.setBackground(new java.awt.Color(51, 51, 255));
        btnNotificaciones.setForeground(new java.awt.Color(255, 255, 255));
        btnNotificaciones.setText("Notificaciones");
        btnNotificaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotificacionesActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");

        jLabel4.setFont(new java.awt.Font("URW Bookman", 0, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("id");

        jLabel5.setFont(new java.awt.Font("URW Bookman", 0, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Precio");

        jLabel6.setFont(new java.awt.Font("URW Bookman", 0, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Cantidad en Stock");

        btnBuscar.setBackground(new java.awt.Color(51, 51, 255));
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("URW Bookman", 0, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Nombre");

        btnCerrarSesion.setText("Cerrar Sesion");
        btnCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionActionPerformed(evt);
            }
        });

        btnCerrarSesion1.setText("compras");
        btnCerrarSesion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesion1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(363, 363, 363)
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCerrarSesion1)
                                .addGap(105, 105, 105)))
                        .addComponent(btnCerrarSesion))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(panelProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModificarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNotificaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(btnCerrarSesion)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(btnCerrarSesion1)
                .addGap(3, 3, 3)
                .addComponent(btnEliminar)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnAgregarProducto)
                        .addGap(79, 79, 79)
                        .addComponent(btnModificarProducto)
                        .addGap(71, 71, 71)
                        .addComponent(btnNotificaciones)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(3, 3, 3)
                        .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(panelProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProductoActionPerformed
        AgregarProductoAdmin cambio=new AgregarProductoAdmin();
        cambio.setVisible(true);
    }//GEN-LAST:event_btnAgregarProductoActionPerformed

    private void btnModificarProductoActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tablaProductos.getSelectedRow();
        if (selectedRow != -1) {
            try {
                // Obtener los datos del producto seleccionado
                String id = tablaProductos.getValueAt(selectedRow, 0).toString();
                String nombre = tablaProductos.getValueAt(selectedRow, 1).toString();
                String descripcion = tablaProductos.getValueAt(selectedRow, 2).toString();
                String precio = tablaProductos.getValueAt(selectedRow, 3).toString();
                String stock = tablaProductos.getValueAt(selectedRow, 4).toString();
                
                // Abrir la ventana de modificaci√≥n
                ModificarProductoAdmin modificarVentana = new ModificarProductoAdmin();
                
                // Establecer los datos en la ventana de modificaci√≥n
                modificarVentana.txtId.setText(id);
                modificarVentana.txtNombre.setText(nombre);
                modificarVentana.txtDescripcion.setText(descripcion);
                modificarVentana.txtPrecio.setText(precio);
                modificarVentana.txtCantidadEnStock.setText(stock);
                
                // Mostrar la ventana de modificaci√≥n
                modificarVentana.setVisible(true);
                
                // Cerrar esta ventana
                this.dispose();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(
                    this,
                    "Error al abrir la ventana de modificaci√≥n: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }

    private void btnRegistrarme2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarme2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegistrarme2ActionPerformed

    private void btnNotificacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotificacionesActionPerformed
        NotificacionesAdmin cambio = new NotificacionesAdmin();
        cambio.setVisible(true);
    }//GEN-LAST:event_btnNotificacionesActionPerformed

    private void btnCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesionActionPerformed
        Login cambio = new Login();
        cambio.setVisible(true);
        this.dispose();
        TokenManager.getInstance().saveToken(null);
    }//GEN-LAST:event_btnCerrarSesionActionPerformed

    private void btnCerrarSesion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesion1ActionPerformed
       HistorialComprasCliente cambio = new HistorialComprasCliente();
       cambio.setVisible(true);
    }//GEN-LAST:event_btnCerrarSesion1ActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {
        String idText = txtId.getText().trim();
        String nombre = txtName.getText().trim();
        String precioText = txtPrecio.getText().trim();
        String stockText = txtStock.getText().trim();

        // Si todos los campos est√°n vac√≠os, recargar la tabla completa
        if (idText.isEmpty() && nombre.isEmpty() && precioText.isEmpty() && stockText.isEmpty()) {
            try {
                llenarTabla();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al cargar los productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            return;
        }

        try {
            List<Producto> productos = new java.util.ArrayList<>();

            // Prioridad: buscar por ID si est√° lleno
            if (!idText.isEmpty()) {
                try {
                    Long id = Long.parseLong(idText);
                    Optional<Producto> producto = controller.getProductoById(id);
                    if (producto.isPresent()) {
                         Producto p = producto.get();
                            String mensaje = String.format(
                                "ID: %d\nNombre: %s\nDescripci√≥n: %s\nPrecio: %.2f\nStock: %d",
                                p.getId(),
                                p.getNombre(),
                                p.getDescripcion(),
                                p.getPrecio(),
                                p.getStock()
                            );
                            JOptionPane.showMessageDialog(
                                this,
                                mensaje,
                                "Detalles del Producto",
                                JOptionPane.INFORMATION_MESSAGE
                            );
                    } else {
                         JOptionPane.showMessageDialog(
                                this,
                                "No se encontr√≥ ning√∫n producto con ese ID",
                                "Informaci√≥n",
                                JOptionPane.INFORMATION_MESSAGE
                            );
                    }
                     // Si se busc√≥ por ID, no continuar con otros filtros
                    return;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Por favor ingrese un ID v√°lido", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } else { // Si ID est√° vac√≠o, buscar por otros filtros
                // Usar findByFilters si hay m√°s de un campo lleno (o uno solo que no sea ID)
                if (!nombre.isEmpty() || !precioText.isEmpty() || !stockText.isEmpty()) {
                    Double precio = null;
                    Integer stock = null;

                    if (!precioText.isEmpty()) {
                        try {
                            precio = Double.parseDouble(precioText);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "Por favor ingrese un precio v√°lido", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }

                    if (!stockText.isEmpty()) {
                        try {
                            stock = Integer.parseInt(stockText);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "Por favor ingrese una cantidad v√°lida", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    
                    // Llamar a findByFilters con los campos llenos
                    productos = controller.findByFilters(nombre.isEmpty() ? null : nombre, precio, stock);
                }
            }

            // Mostrar resultados en la tabla (solo si la b√∫squeda no fue por ID)
            if (!idText.isEmpty()) {
                 // Already handled with JOptionPane, do nothing here for table
            } else if (productos != null && !productos.isEmpty()) {
                DefaultTableModel model = (DefaultTableModel) tablaProductos.getModel();
                model.setRowCount(0); // Limpiar la tabla
                
                for (Producto producto : productos) {
                    model.addRow(new Object[]{
                        producto.getId(),
                        producto.getNombre(),
                        producto.getDescripcion(),
                        producto.getPrecio(),
                        producto.getStock()
                    });
                }
            } else if (!idText.isEmpty()){
                 // Handled by JOptionPane above
            }else {
                JOptionPane.showMessageDialog(this, "No se encontraron productos con los criterios especificados", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
                 DefaultTableModel model = (DefaultTableModel) tablaProductos.getModel();
                 model.setRowCount(0); // Limpiar la tabla si no hay resultados
            }
        } catch (IOException | BackendException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tablaProductos.getSelectedRow();
        if (selectedRow != -1) {
            int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¬øEst√° seguro que desea eliminar este producto?",
                "Confirmar eliminaci√≥n",
                JOptionPane.YES_NO_OPTION
            );
            
            if (confirmacion == JOptionPane.YES_OPTION) {
                try {
                    // Obtener el ID del producto seleccionado
                    String id = tablaProductos.getValueAt(selectedRow, 0).toString();
                    
                    // Eliminar el producto usando el controlador
                    controller.deleteProducto(Long.parseLong(id));
                    
                    // Eliminar la fila de la tabla (usando el modelo actual de la tabla)
                    DefaultTableModel currentTableModel = (DefaultTableModel) tablaProductos.getModel();
                    currentTableModel.removeRow(selectedRow);
                    
                    // Mostrar mensaje de √©xito
                    JOptionPane.showMessageDialog(
                        this,
                        "Producto eliminado exitosamente",
                        "√âxito",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                    
                    // Limpiar los campos de texto
                    txtId.setText("");
                    txtName.setText("");
                    txtPrecio.setText("");
                    txtStock.setText("");
                    
                } catch (BackendException e) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error al eliminar el producto: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                } catch (NumberFormatException e) {
                    // Este catch no deber√≠a ser alcanzado si el ID se obtiene de la tabla,
                    // pero por si acaso, mejoramos el mensaje.
                    JOptionPane.showMessageDialog(
                        this,
                        "Error interno: formato de ID inv√°lido.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error al eliminar el producto: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipalAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProducto;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCerrarSesion;
    private javax.swing.JButton btnCerrarSesion1;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificarProducto;
    private javax.swing.JButton btnNotificaciones;
    private javax.swing.JButton btnRegistrarme2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelProductos;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
