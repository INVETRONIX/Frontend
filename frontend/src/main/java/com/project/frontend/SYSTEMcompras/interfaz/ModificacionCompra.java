/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.project.frontend.SYSTEMcompras.interfaz;

import com.project.frontend.SYSTEMcompras.controller.ControllerCompra;
import com.project.frontend.SYSTEMcompras.model.Compra;
import com.project.frontend.SYSTEMproductos.controller.ControllerProducto;
import com.project.frontend.SYSTEMproductos.model.Producto;
import com.project.frontend.core.BackendException;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import javax.swing.*;
import java.awt.*;

/**
 *
 * @author sebastian
 */
public class ModificacionCompra extends JFrame {
    private ControllerCompra controllerCompra;
    private ControllerProducto controllerProducto;
    private Long idCompra;
    private Compra compraActual;
    private List<Producto> productos;
    private JPanel mainPanel;
    private JPanel leftPanel;
    private JPanel rightPanel;
    private JComboBox<Producto> cmbProductos;
    private JButton btnModificar;
    private JButton btnVolver;

    /**
     * Creates new form ModificacionCompra
     */
    public ModificacionCompra() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.controllerCompra = new ControllerCompra();
        this.controllerProducto = new ControllerProducto();
        cargarProductos();
    }

    private void cargarProductos() {
        try {
            productos = controllerProducto.getAllProductos();
            DefaultComboBoxModel<Producto> model = new DefaultComboBoxModel<>();
            for (Producto producto : productos) {
                model.addElement(producto);
            }
            cmbProductos.setModel(model);
        } catch (IOException | BackendException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void setIdCompra(Long idCompra) {
        this.idCompra = idCompra;
        cargarDatosCompra();
    }

    private void cargarDatosCompra() {
        try {
            Optional<Compra> compraOpt = controllerCompra.getCompraById(idCompra);
            if (compraOpt.isPresent()) {
                compraActual = compraOpt.get();
                if (compraActual.getProducto() != null) {
                    for (int i = 0; i < cmbProductos.getItemCount(); i++) {
                        Producto p = cmbProductos.getItemAt(i);
                        if (p.getId().equals(compraActual.getProducto().getId())) {
                            cmbProductos.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró la compra", "Error", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }
        } catch (IOException | BackendException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar la compra: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modificar Producto de la Compra");
        setSize(900, 400);
        setResizable(false);
        setLocationRelativeTo(null);

        mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(new Color(245, 245, 245));

        // Panel izquierdo (logo y título)
        leftPanel = new JPanel();
        leftPanel.setBackground(new Color(0, 122, 255));
        leftPanel.setPreferredSize(new Dimension(350, 400));
        leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
        leftPanel.setBorder(BorderFactory.createEmptyBorder(40, 30, 40, 30));

        JLabel lblLogo = new JLabel("Invetronix");
        lblLogo.setFont(new Font("Segoe UI", Font.BOLD, 32));
        lblLogo.setForeground(Color.WHITE);
        lblLogo.setAlignmentX(Component.CENTER_ALIGNMENT);
        leftPanel.add(lblLogo);
        leftPanel.add(Box.createVerticalStrut(40));

        JLabel lblTitulo = new JLabel("Modificar Compra");
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 22));
        lblTitulo.setForeground(Color.WHITE);
        lblTitulo.setAlignmentX(Component.CENTER_ALIGNMENT);
        leftPanel.add(lblTitulo);
        leftPanel.add(Box.createVerticalGlue());

        // Panel derecho (formulario)
        rightPanel = new JPanel();
        rightPanel.setBackground(new Color(245, 245, 245));
        rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));
        rightPanel.setBorder(BorderFactory.createEmptyBorder(40, 40, 40, 40));

        JLabel lblSubtitulo = new JLabel("Seleccione el nuevo producto para la compra:");
        lblSubtitulo.setFont(new Font("Segoe UI", Font.PLAIN, 18));
        lblSubtitulo.setForeground(new Color(33, 33, 33));
        lblSubtitulo.setAlignmentX(Component.CENTER_ALIGNMENT);
        rightPanel.add(lblSubtitulo);
        rightPanel.add(Box.createVerticalStrut(30));

        cmbProductos = new JComboBox<>();
        cmbProductos.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        cmbProductos.setMaximumSize(new Dimension(400, 40));
        cmbProductos.setPreferredSize(new Dimension(400, 40));
        cmbProductos.setBackground(Color.WHITE);
        cmbProductos.setForeground(new Color(33, 33, 33));
        cmbProductos.setAlignmentX(Component.CENTER_ALIGNMENT);
        rightPanel.add(cmbProductos);
        rightPanel.add(Box.createVerticalStrut(40));

        // Panel de botones
        JPanel buttonsPanel = new JPanel();
        buttonsPanel.setLayout(new BoxLayout(buttonsPanel, BoxLayout.X_AXIS));
        buttonsPanel.setBackground(new Color(245, 245, 245));
        buttonsPanel.setAlignmentX(Component.CENTER_ALIGNMENT);

        btnModificar = new JButton("Modificar");
        btnModificar.setPreferredSize(new Dimension(150, 40));
        btnModificar.setMaximumSize(new Dimension(150, 40));
        btnModificar.setBackground(new Color(41, 128, 185));
        btnModificar.setForeground(Color.BLUE);
        btnModificar.setFont(new Font("Segoe UI", Font.BOLD, 16));
        btnModificar.setFocusPainted(false);
        btnModificar.setBorderPainted(false);
        btnModificar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnModificar.addActionListener(e -> btnModificarActionPerformed(null));
        buttonsPanel.add(Box.createHorizontalGlue());
        buttonsPanel.add(btnModificar);
        buttonsPanel.add(Box.createRigidArea(new Dimension(20, 0)));

        btnVolver = new JButton("Volver");
        btnVolver.setPreferredSize(new Dimension(150, 40));
        btnVolver.setMaximumSize(new Dimension(150, 40));
        btnVolver.setBackground(new Color(220, 53, 69));
        btnVolver.setForeground(Color.RED);
        btnVolver.setFont(new Font("Segoe UI", Font.BOLD, 16));
        btnVolver.setFocusPainted(false);
        btnVolver.setBorderPainted(false);
        btnVolver.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnVolver.addActionListener(e -> btnVolverActionPerformed(null));
        buttonsPanel.add(btnVolver);
        buttonsPanel.add(Box.createHorizontalGlue());

        rightPanel.add(buttonsPanel);
        rightPanel.add(Box.createVerticalGlue());

        mainPanel.add(leftPanel, BorderLayout.WEST);
        mainPanel.add(rightPanel, BorderLayout.CENTER);
        add(mainPanel);
    }

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            Producto productoSeleccionado = (Producto) cmbProductos.getSelectedItem();
            if (productoSeleccionado == null) {
                JOptionPane.showMessageDialog(this, "Por favor seleccione un producto", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            compraActual.setProducto(productoSeleccionado);
            compraActual.setTotal(productoSeleccionado.getPrecio());
            
            Optional<Compra> compraActualizada = controllerCompra.updateCompra(idCompra, compraActual);
            
            if (compraActualizada.isPresent()) {
                JOptionPane.showMessageDialog(this, "Producto de la compra modificado exitosamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                HistorialComprasAdmin ventanaHistorial = new HistorialComprasAdmin();
                ventanaHistorial.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo modificar el producto de la compra", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException | BackendException e) {
            JOptionPane.showMessageDialog(this, "Error al modificar el producto de la compra: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {
        HistorialComprasAdmin ventanaHistorial = new HistorialComprasAdmin();
        ventanaHistorial.setVisible(true);
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        EventQueue.invokeLater(() -> {
            new ModificacionCompra().setVisible(true);
        });
    }
}
